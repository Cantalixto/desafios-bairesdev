# -*- coding: utf-8 -*-
"""desafio-transfer-learning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Gcv2I_OdTFvQyXys7fOYMPnyhdK_YiRS
"""

#Instala o tensorflow

!pip install -q tensorflow tensorflow_datasets

# Importa as bibliotecas
import tensorflow as tf
import tensorflow_datasets as tfds
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image

"""Carrega o dataset Cats vs Dogs e divide em treino, validação e teste."""

# Carrega o dataset Cats vs Dogs e divide em treino, validação e teste

(train_ds, val_ds, test_ds), info = tfds.load(
    'cats_vs_dogs',
    split=['train[:70%]', 'train[70%:85%]', 'train[85%:]'],
    as_supervised=True,
    with_info=True
)

"""Redimensiona as imagens para o tamanho que o modelo espera e normaliza os pixels."""

# Redimensiona as imagens para o tamanho que o modelo espera e normaliza os pixels

IMG_SIZE = (160, 160)

def format_image(image, label):
    image = tf.image.resize(image, IMG_SIZE)
    image = tf.cast(image, tf.float32) / 255.0
    return image, label

train_ds = train_ds.map(format_image).batch(32).prefetch(tf.data.AUTOTUNE)
val_ds = val_ds.map(format_image).batch(32).prefetch(tf.data.AUTOTUNE)
test_ds = test_ds.map(format_image).batch(32).prefetch(tf.data.AUTOTUNE)

"""Carrega o modelo pré-treinado MobileNetV2 com transfer learning"""

# Carrega o modelo pré-treinado MobileNetV2 com transfer learning

base_model = tf.keras.applications.MobileNetV2(
    input_shape=IMG_SIZE + (3,),
    include_top=False,
    weights='imagenet'
)
base_model.trainable = False

model = tf.keras.Sequential([
    base_model,
    tf.keras.layers.GlobalAveragePooling2D(),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

"""Treina o modelo por 3 épocas"""

# Treina o modelo por 3 épocas

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
model.fit(train_ds, validation_data=val_ds, epochs=3)

"""Avalia e salva o modelo treinado"""

# Avalia e salva o modelo treinado

model.evaluate(test_ds)

# Salva o modelo treinado
model.save('cats_vs_dogs_model.h5')

# Faz o download do modelo para o computador
from google.colab import files
files.download('cats_vs_dogs_model.h5')

"""Escolhe a foto para teste"""

# Escolhe a foto para teste

from google.colab import files
uploaded = files.upload()

# Carregar o modelo treinado
model = tf.keras.models.load_model('cats_vs_dogs_model.h5')

# Caminho da imagem (após upload)
img_path = '/content/loki.jpeg'

# Preparar a imagem
img = Image.open(img_path).resize((160, 160))
img_array = np.array(img) / 255.0
img_array = np.expand_dims(img_array, axis=0)

# Fazer a previsão
prediction = model.predict(img_array)

# Mostrar imagem e resultado
plt.imshow(img)
plt.axis('off')
plt.title("Imagem testada")
plt.show()

# Interpretar o resultado
if prediction[0][0] > 0.5:
    print("✅ Classificado como CACHORRO 🐶")
else:
    print("❌ Classificado como GATO 🐱")