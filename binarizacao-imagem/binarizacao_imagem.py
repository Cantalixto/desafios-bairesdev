# -*- coding: utf-8 -*-
"""binarizacao-imagem.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17hRojfFrFfErok21PKwg8uwT7KsWkn_P
"""



"""# Task
Binarize the image "lena.png" and display the original and binarized images.

## Load the image

### Subtask:
Load the image from the specified path.

desafio de binarização de imagem usando funções pura no python
"""

# Binarização de imagem usando apenas funções no python (sem usar biblioteca de binarização)

# Importa as bibliotecas para plotar as imagens

from PIL import Image
import matplotlib.pyplot as plt

# Abre  e exibe a imagem colorida

imagem_colorida = Image.open('lena.png')
plt.imshow(imagem_colorida)
plt.axis('off')
plt.title('Imagem Colorida (RGB)')
plt.show()

# Converte a imagem para RGB (caso não esteja)

imagem_colorida = imagem_colorida.convert('RGB')

# Transforma em matriz RGB

largura, altura = imagem_colorida.size
pixels_rgb = list(imagem_colorida.getdata())
imagem_rgb = [[pixels_rgb[i * largura + j] for j in range(largura)] for i in range(altura)]

# Função para converter para tons de cinza

def converter_para_tons_de_cinza(imagem_rgb):
    imagem_cinza = []
    for linha in imagem_rgb:
        linha_cinza = []
        for pixel in linha:
            r, g, b = pixel
            gray = int(0.2989 * r + 0.5870 * g + 0.1140 * b)
            linha_cinza.append(gray)
        imagem_cinza.append(linha_cinza)
    return imagem_cinza

# Função para binarizar a imagem

def binarizar_imagem(imagem_cinza, limiar):
    imagem_binaria = []
    for linha in imagem_cinza:
        linha_binaria = []
        for pixel in linha:
            if pixel > limiar:
                linha_binaria.append(255)
            else:
                linha_binaria.append(0)
        imagem_binaria.append(linha_binaria)
    return imagem_binaria

# Aplica conversão para tons de cinza

imagem_cinza = converter_para_tons_de_cinza(imagem_rgb)
plt.imshow(imagem_cinza, cmap='gray')
plt.axis('off')
plt.title('Imagem em Tons de Cinza')
plt.show()

# Aplica binarização

limiar = 128
imagem_binaria = binarizar_imagem(imagem_cinza, limiar)
plt.imshow(imagem_binaria, cmap='gray', vmin=0, vmax=255)
plt.axis('off')
plt.title('Imagem Binarizada')
plt.show()

"""**Reasoning**:
The subtask is to load the image, so I will import the necessary library and load the image using the specified function.

# Redução de Dimensionalidade em Imagens para Redes Neurais

Este projeto demonstra a binarização de imagens utilizando funções puras em Python, sem depender de bibliotecas especializadas de processamento de imagem para a etapa de binarização em si. Embora o título mencione "Redução de Dimensionalidade em Imagens para Redes Neurais", este código específico foca na **binarização**, que é um tipo de pré-processamento que pode ser útil para redes neurais, mas não é uma técnica de redução de dimensionalidade no sentido clássico (como PCA ou autoencoders).

## Descrição do Projeto

O objetivo deste projeto é pegar uma imagem colorida, convertê-la para tons de cinza e, em seguida, aplicar um limiar de binarização para criar uma imagem em preto e branco. Este processo é implementado utilizando conceitos fundamentais de Python, focando na manipulação de pixels dentro de listas aninhadas (representando a matriz da imagem).

## Requisitos

*   Python 3.6 ou superior
*   Biblioteca Pillow (`pip install Pillow`)
*   Biblioteca Matplotlib (`pip install matplotlib`)

## Como Executar

1.  **Clone o repositório:**
"""

pip install -r requirements.txt